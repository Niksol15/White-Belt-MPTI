#include <iostream>
#include <map>
#include <set>
#include <string>
#include <exception>
#include <sstream>
#include <iomanip>

using namespace std;

class Date {
public:
    Date() = default;
    Date(int _year, int _month, int _day){
        if(_month > 12 ||  _month < 1)
            throw runtime_error("Month value is invalid: " + to_string(_month));
        if(_day < 1 || _day > 31)
            throw runtime_error("Day value is invalid: " + to_string(_day));
        year = _year;
        month = _month;
        day = _day;
    }
    int GetYear() const{
        return year;
    }
    int GetMonth() const{
        return month;
    }
    int GetDay() const{
        return day;
    }
private:
    int year;
    int month;
    int day;
};

bool operator<(const Date& lhs, const Date& rhs){
    if(lhs.GetYear() != rhs.GetYear())
        return lhs.GetYear() < rhs.GetYear();
    else if(lhs.GetMonth() != rhs.GetMonth())
        return lhs.GetMonth() < rhs.GetMonth();
    else
        return lhs.GetDay() < rhs.GetDay();
}

ostream& operator<<(ostream& stream, const Date& date){
    stream << setfill('0');
    stream << setw(4) << date.GetYear() << "-" << setw(2)
            << date.GetMonth() << '-' << setw(2) << date.GetDay();
    return stream;
}

Date ParseDate(const string& date){
    stringstream stream(date);
    int _year;
    if(!(stream >> _year) || stream.peek() != '-')
        throw runtime_error("Wrong date format: " + date);
    stream.ignore(1);
    int _month;
    if(!(stream >> _month) || stream.peek() != '-')
        throw runtime_error("Wrong date format: " + date);
    stream.ignore(1);
    int _day;
    if(!(stream >> _day))
        throw runtime_error("Wrong date format: " + date);
    string test;
    if(stream >> test)
        throw runtime_error("Wrong date format: " + date);
    return Date(_year, _month, _day);
}
istream& operator>>(istream& stream, Date& date){
    string temp;
    stream >> temp;
    date = ParseDate(temp);
    return stream;
}

class Database {
public:
    void AddEvent(const Date& date, const string& event){
        database[date].insert(event);
    }

    bool DeleteEvent(const Date& date, const string& event){
        if(database.count(date) == 0){
            cout << "Event not found" << endl;
            return false;
        }
        if((database.at(date)).count(event) == 0){
            cout << "Event not found" << endl;
            return false;
        }
        database[date].erase(event);
        cout << "Deleted successfully" << endl;
        return true;
    }
    int DeleteDate(const Date& date){
        int size = (database[date]).size();
        cout << "Deleted " << size << " events" << endl;
        database.erase(date);
        return size;
    }

    void Find(const Date& date) const{
        if(database.count(date) != 0){
            for(const auto& events: database.at(date))
                cout << events << endl;
        }
    }

    void Print() const{
        for(const auto& date: database)
            for(const auto& event: date.second)
                cout << date.first << " " << event << endl;
    }
private:
    map<Date, set<string>> database;
};
int main() {
    Database db;
    Date date;
    string command, firstPart, event;
    while (getline(cin, command)) {
        if(!command.empty()){
            stringstream stream(command);
            try{
                stream >> firstPart;
                if(firstPart == "Print"){
                    db.Print();
                } else if(firstPart == "Find"){
                    stream >> date;
                    db.Find(date);
                } else if(firstPart == "Del"){
                    stream >> date;
                    if(stream >> event ){
                       db.DeleteEvent(date, event);
                    } else{
                        db.DeleteDate(date);
                    }
                } else if(firstPart == "Add"){
                    stream >> date >> event;
                    db.AddEvent(date, event);
                } else
                    throw runtime_error("Unknown command: " + firstPart);
            }catch(exception& err){
                cout << err.what() << endl;
            }
        }
    }
    return 0;
}
